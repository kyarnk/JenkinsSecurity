                    
                    
┌──────────────────┐
│ 60 Code Findings │
└──────────────────┘
                                                     
    /mnt/data/static/codefixes/dbSchemaChallenge_1.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
            5┆ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR
               description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")           
                                                     
    /mnt/data/static/codefixes/dbSchemaChallenge_3.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           11┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                       
    /mnt/data/static/codefixes/restfulXssChallenge_2.ts
     ❱ javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                        
          `tableData[i].description`. Manually sanitizing input through a manually built list can be       
          circumvented in many situations, and it's better to use a well known sanitization library such as
          `sanitize-html` or `DOMPurify`.                                                                  
          Details: https://sg.run/AzoB                                                                     
                                                                                                           
           59┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',
               '&gt;')                                                                                    
            ⋮┆----------------------------------------
     ❱ javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                          
          `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually   
          built list can be circumvented in many situations, and it's better to use a well known sanitization
          library such as `sanitize-html` or `DOMPurify`.                                                    
          Details: https://sg.run/AzoB                                                                       
                                                                                                             
           59┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',
               '&gt;')                                                                                    
                                                              
    /mnt/data/static/codefixes/unionSqlInjectionChallenge_1.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
            6┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                              
    /mnt/data/static/codefixes/unionSqlInjectionChallenge_3.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           10┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                              
    /mnt/data/static/users.yml
   ❯❯❱ generic.secrets.security.detected-generic-secret.detected-generic-secret
          Generic Secret detected     
          Details: https://sg.run/l2o5
                                      
          150┆ totpSecret: IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH
                           
    /mnt/data/staticData.ts
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
            7┆ const filePath = path.resolve('./data/static/' + file + '.yml')
                                           
    /mnt/frontend/src/app/app.guard.spec.ts
   ❯❯❱ generic.secrets.security.detected-jwt-token.detected-jwt-token
          JWT token detected          
          Details: https://sg.run/05N5
                                      
           40┆ localStorage.setItem('token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODk
               wIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQs
               sw5c')                                                                                     
                                                                       
    /mnt/frontend/src/app/last-login-ip/last-login-ip.component.spec.ts
   ❯❯❱ generic.secrets.security.detected-jwt-token.detected-jwt-token
          JWT token detected          
          Details: https://sg.run/05N5
                                      
           61┆ localStorage.setItem('token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Imxhc3RMb2d
               pbklwIjoiMS4yLjMuNCJ9fQ.RAkmdqwNypuOxv3SDjPO4xMKvd1CddKvDFYDBfUt3bg')                      
            ⋮┆----------------------------------------
           67┆ localStorage.setItem('token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7fX0.bVBhvll
               6IaeR3aUdoOeyR8YZe2S2DfhGAxTGfd9enLw')                                                     
                                                           
    /mnt/frontend/src/hacking-instructor/helpers/helpers.ts
    ❯❱ javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           38┆ replacementValue = replacementValue[property]
                                                 
    /mnt/frontend/src/hacking-instructor/index.ts
   ❯❯❱ javascript.browser.security.insecure-document-method.insecure-document-method
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          113┆ textBox.innerHTML = snarkdown(hint.text)
                                
    /mnt/frontend/src/index.html
    ❯❱ html.security.audit.missing-integrity.missing-integrity
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           14┆ <link rel="stylesheet" type="text/css"                                               
               href="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.css" />
            ⋮┆----------------------------------------
           15┆ <script                                                                                   
               src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js"></script>
            ⋮┆----------------------------------------
           16┆ <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
                                
    /mnt/lib/codingChallenges.ts
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           24┆ files.map(file => path.resolve(currPath, file))
            ⋮┆----------------------------------------
           24┆ files.map(file => path.resolve(currPath, file))
   
    ❯❱ javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `challengeKey` function argument, this might allow an attacker to cause a    
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           76┆ if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {
            ⋮┆----------------------------------------
           78┆ } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) !=
               null) {                                                                                   
                          
    /mnt/lib/insecurity.ts
    ❯❱ javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key
          Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such
          as reading the secret from a config file or using an environment variable.                         
          Details: https://sg.run/K9bn                                                                       
                                                                                                             
           44┆ export const hmac = (data: string) => crypto.createHmac('sha256',
               'pa4qacea4VK9t9nGv7yZtwmj').update(data).digest('hex')           
   
    ❯❱ javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
          A hard-coded credential was detected. It is not recommended to store credentials in source-code, as
          this risks secrets being leaked and used by either an internal or external malicious adversary. It 
          is recommended to use environment variables to securely provide credentials or retrieve credentials
          from a secure vault or HSM (Hardware Security Module).                                             
          Details: https://sg.run/4xN9                                                                       
                                                                                                             
           56┆ export const authorize = (user = {}) => jwt.sign(user, privateKey, { expiresIn: '6h',
               algorithm: 'RS256' })                                                                
   
    ❯❱ javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key
          Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such
          as reading the secret from a config file or using an environment variable.                         
          Details: https://sg.run/K9bn                                                                       
                                                                                                             
          152┆ const hmac = crypto.createHmac('sha256', privateKey)
                                                            
    /mnt/lib/startup/restoreOverwrittenFilesWithOriginals.ts
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           28┆ await copyFile(filename, path.resolve('i18n/', filename.substring(filename.lastIndexOf('/')
               + 1)))                                                                                     
                                             
    /mnt/lib/startup/validatePreconditions.ts
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          121┆ return await access(path.resolve(pathRelativeToProjectRoot)).then(() => {
                           
    /mnt/routes/b2bOrder.ts
    ❯❱ javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage
          Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any 
          sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up
          to date alternative. Be sure that only trusted input reaches an `eval()` function.                
          Details: https://sg.run/W70E                                                                      
                                                                                                            
           22┆ vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })
                          
    /mnt/routes/captcha.ts
    ❯❱ javascript.browser.security.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/7ope                                                                     
                                                                                                           
           23┆ const answer = eval(expression).toString() // eslint-disable-line no-eval
                          
    /mnt/routes/chatbot.ts
    ❯❱ javascript.express.security.injection.raw-html-format.raw-html-format
          User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-
          Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a         
          sanitization library such as DOMPurify to sanitize the HTML within.                                 
          Details: https://sg.run/5DO3                                                                        
                                                                                                              
          198┆ body: bot.training.state ? bot.greet(`${user.id}`) :                                     
               `${config.get<string>('application.chatBot.name')} isn't ready at the moment, please wait
               while I set things up`                                                                   
                              
    /mnt/routes/dataErasure.ts
    ❯❱ javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           69┆ const filePath: string = path.resolve(req.body.layout).toLowerCase()
   
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           69┆ const filePath: string = path.resolve(req.body.layout).toLowerCase()
                             
    /mnt/routes/fileServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           33┆ res.sendFile(path.resolve('ftp/', file))
   
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           33┆ res.sendFile(path.resolve('ftp/', file))
                             
    /mnt/routes/fileUpload.ts
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           32┆ const tempFile = path.join(os.tmpdir(), filename)
            ⋮┆----------------------------------------
           42┆ const absolutePath = path.resolve('uploads/complaints/' + fileName)
   
    ❯❱ javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent
          Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML
          External Entities (XXE) attack if untrusted data is passed into it.                              
          Details: https://sg.run/n8Ag                                                                     
                                                                                                           
           83┆ const xmlDoc = vm.runInContext('libxml.parseXml(data, { noblanks: true, noent: true,
               nocdata: true })', sandbox, { timeout: 2000 })                                      
                            
    /mnt/routes/keyServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
   
    ❯❱ javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
   
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
                                
    /mnt/routes/logfileServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           14┆ res.sendFile(path.resolve('logs/', file))
   
    ❯❱ javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14┆ res.sendFile(path.resolve('logs/', file))
   
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           14┆ res.sendFile(path.resolve('logs/', file))
                        
    /mnt/routes/login.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           36┆ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND
               password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model:
               UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge           
               loginBenderChallenge loginJimChallenge                                                 
                        
    /mnt/routes/order.ts
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           45┆ const fileWriter = doc.pipe(fs.createWriteStream(path.join('ftp/', pdfFile)))
                                        
    /mnt/routes/profileImageUrlUpload.ts
    ❯❱ javascript.express.security.audit.express-ssrf.express-ssrf
          The following request request.get() was found to be crafted from user-input `req` which can lead to 
          Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow   
          user-input to craft the base request, but to be treated as part of the path or query parameter. When
          user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to  
          prevent abuse.                                                                                      
          Details: https://sg.run/0PNw                                                                        
                                                                                                              
           23┆ .get(url)
                                   
    /mnt/routes/quarantineServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
   
    ❯❱ javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
   
    ❯❱ javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
                           
    /mnt/routes/redirect.ts
    ❯❱ javascript.express.security.audit.express-open-redirect.express-open-redirect
          The application redirects to a URL specified by user-supplied input `query` that is not validated. 
          This could redirect users to malicious locations. Consider using an allow-list approach to validate
          URLs, or warn users they are being redirected to a third-party website.                            
          Details: https://sg.run/EpoP                                                                       
                                                                                                             
           19┆ res.redirect(toUrl)
                         
    /mnt/routes/search.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           23┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR   
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-
               snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                        
                              
    /mnt/routes/userProfile.ts
    ❯❱ javascript.browser.security.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/7ope                                                                     
                                                                                                           
           36┆ username = eval(code) // eslint-disable-line no-eval
   
    ❯❱ javascript.express.security.express-insecure-template-usage.express-insecure-template-usage
          User data from `req` is being compiled into the template, which can lead to a Server Side Template
          Injection (SSTI) vulnerability.                                                                   
          Details: https://sg.run/b49v                                                                      
                                                                                                            
           56┆ const fn = pug.compile(template)
                               
    /mnt/routes/videoHandler.ts
    ❯❱ javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                      
                                                                                                            
           57┆ challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs,
               '</script><script>alert(`xss`)</script>') })                                            
            ⋮┆----------------------------------------
           69┆ compiledTemplate = compiledTemplate.replace('<script id="subtitle"></script>', '<script  
               id="subtitle" type="text/vtt" data-label="English" data-lang="en">' + subs + '</script>')
                  
    /mnt/server.ts
     ❱ javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
          A CSRF middleware was not detected in your express application. Ensure you are either using one such
          as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your    
          routes with a token or cookies.                                                                     
          Details: https://sg.run/BxzR                                                                        
                                                                                                              
          106┆ const app = express()
   
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          149┆ console.error('Error in timed startup function: ' + name, err)
   
    ❯❱ javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and 
          files. It is recommended to disable directory listing unless it is a public resource. If you need
          directory listing, ensure that sensitive files are inaccessible when querying the resource.      
          Details: https://sg.run/DX2G                                                                     
                                                                                                           
          261┆ app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-
               snippet vuln-line directoryListingChallenge                                            
            ⋮┆----------------------------------------
          265┆ app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true,
               view: 'details' }))                                                                   
            ⋮┆----------------------------------------
          269┆ app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons:
               true, view: 'details' }))                                                             
            ⋮┆----------------------------------------
          273┆ app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view:
               'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge             
                                 
    /mnt/views/promotionVideo.pug
    ❯❱ javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
          Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can
          reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If
          you must do this, ensure no external data can reach this location.                                  
          Details: https://sg.run/3xbe                                                                        
                                                                                                              
           79┆ if (splitted.length != 2) {
